{"version":3,"sources":["../../webpack/bootstrap","../../external \"path\"","../.././src/client/sourceMapSupport.ts","../.././src/client/common/utils/localize.ts","../../external \"fs\"","../.././src/client/constants.ts","../../external \"./node_modules/source-map-support\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","setting","SourceMapSupport","[object Object]","vscode","this","config","workspace","getConfiguration","undefined","enabled","initializeSourceMaps","localize","disable","Diagnostics","disableSourceMaps","window","showWarningMessage","warnSourceMaps","update","ConfigurationTarget","Global","install","default","initialize","catch","ex","console","error","fs","path","constants_1","loadedCollection","defaultCollection","warnBeforeEnablingSourceMaps","enableSourceMapsAndReloadVSC","LanguageServiceSurveyBanner","bannerMessage","bannerLabelYes","bannerLabelNo","Interpreters","loading","refreshing","Linters","installedButNotEnabled","DataScienceSurveyBanner","DataScience","historyTitle","badWebPanelFormatString","sessionDisposed","unknownMimeType","exportDialogTitle","exportDialogFilter","exportDialogComplete","exportDialogFailed","exportOpenQuestion","runCellLensCommandTitle","importDialogTitle","importDialogFilter","notebookCheckForImportTitle","notebookCheckForImportYes","notebookCheckForImportNo","notebookCheckForImportDontAskAgain","jupyterNotSupported","jupyterNbConvertNotSupported","jupyterLaunchTimedOut","jupyterLaunchNoURL","pythonInteractiveHelpLink","importingFormat","startingJupyter","runAllCellsLensCommandTitle","restartKernelMessage","restartKernelMessageYes","restartKernelMessageNo","restartingKernelStatus","executingCode","collapseAll","expandAll","exportKey","restartServer","undo","redo","clearAll","pythonVersionHeader","pythonRestartHeader","pythonVersionHeaderNoPyKernel","jupyterNotebookFailure","notebookVersionFormat","jupyterKernelNotSupportedOnActive","jupyterKernelSpecNotFound","interruptKernel","askedForCollection","loadedLocale","defValue","parseLocale","load","getString","vscodeConfigString","process","env","VSCODE_NLS_CONFIG","JSON","parse","locale","nlsFile","join","EXTENSION_ROOT_DIR","existsSync","contents","readFileSync","defaultNlsFile","getCollection","assign","getAskedForCollection","folderName","basename","__dirname"],"mappings":"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","file":"sourceMapSupport.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"path\");","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n'use strict';\n\nimport { WorkspaceConfiguration } from 'vscode';\ntype VSCode = typeof import('vscode');\n\n// tslint:disable:no-require-imports\nconst setting = 'sourceMapsEnabled';\n\nexport class SourceMapSupport {\n    private readonly config: WorkspaceConfiguration;\n    constructor(private readonly vscode: VSCode) {\n        this.config = this.vscode.workspace.getConfiguration('python.diagnostics', undefined);\n    }\n    public async initialize(): Promise<void> {\n        if (!this.enabled) {\n            return;\n        }\n        this.initializeSourceMaps();\n        const localize = require('./common/utils/localize') as typeof import('./common/utils/localize');\n        const disable = localize.Diagnostics.disableSourceMaps();\n        const selection = await this.vscode.window.showWarningMessage(localize.Diagnostics.warnSourceMaps(), disable);\n        if (selection === disable) {\n            await this.disable();\n        }\n    }\n    public get enabled(): boolean {\n        return this.config.get<boolean>(setting, false);\n    }\n    public async disable(): Promise<void> {\n        await this.config.update(setting, false, this.vscode.ConfigurationTarget.Global);\n    }\n    protected initializeSourceMaps() {\n        require('./node_modules/source-map-support').install();\n    }\n}\n// tslint:disable-next-line:no-default-export\nexport default function initialize(vscode: VSCode) {\n    new SourceMapSupport(vscode).initialize().catch(ex => {\n        console.error('Failed to initialize source map support in extension');\n    });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n'use strict';\r\n\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { EXTENSION_ROOT_DIR } from '../../constants';\r\n\r\n// External callers of localize use these tables to retrieve localized values.\r\nexport namespace Diagnostics {\r\n    export const warnSourceMaps = localize('diagnostics.warnSourceMaps', 'Source map support is enabled in the Python Extension, this will adversely impact performance of the extension.');\r\n    export const disableSourceMaps = localize('diagnostics.disableSourceMaps', 'Disable Source Map Support');\r\n    export const warnBeforeEnablingSourceMaps = localize('diagnostics.warnBeforeEnablingSourceMaps', 'Enabling source map support in the Python Extension will adversely impact performance of the extension.');\r\n    export const enableSourceMapsAndReloadVSC = localize('diagnostics.enableSourceMapsAndReloadVSC', 'Enable and reload Window.');\r\n}\r\n\r\nexport namespace LanguageServiceSurveyBanner {\r\n    export const bannerMessage = localize('LanguageServiceSurveyBanner.bannerMessage', 'Can you please take 2 minutes to tell us how the Python Language Server is working for you?');\r\n    export const bannerLabelYes = localize('LanguageServiceSurveyBanner.bannerLabelYes', 'Yes, take survey now');\r\n    export const bannerLabelNo = localize('LanguageServiceSurveyBanner.bannerLabelNo', 'No, thanks');\r\n}\r\n\r\nexport namespace Interpreters {\r\n    export const loading = localize('Interpreters.LoadingInterpreters', 'Loading Python Interpreters');\r\n    export const refreshing = localize('Interpreters.RefreshingInterpreters', 'Refreshing Python Interpreters');\r\n}\r\n\r\nexport namespace Linters {\r\n    export const installedButNotEnabled = localize('Linter.InstalledButNotEnabled', 'Linter {0} is installed but not enabled.');\r\n}\r\n\r\nexport namespace DataScienceSurveyBanner {\r\n    export const bannerMessage = localize('DataScienceSurveyBanner.bannerMessage', 'Can you please take 2 minutes to tell us how the Python Data Science features are working for you?');\r\n    export const bannerLabelYes = localize('DataScienceSurveyBanner.bannerLabelYes', 'Yes, take survey now');\r\n    export const bannerLabelNo = localize('DataScienceSurveyBanner.bannerLabelNo', 'No, thanks');\r\n}\r\n\r\nexport namespace DataScience {\r\n    export const historyTitle = localize('DataScience.historyTitle', 'Python Interactive');\r\n    export const badWebPanelFormatString = localize('DataScience.badWebPanelFormatString', '<html><body><h1>{0} is not a valid file name</h1></body></html>');\r\n    export const sessionDisposed = localize('DataScience.sessionDisposed', 'Cannot execute code, session has been disposed.');\r\n    export const unknownMimeType = localize('DataScience.unknownMimeType', 'Unknown mime type for data');\r\n    export const exportDialogTitle = localize('DataScience.exportDialogTitle', 'Export to Jupyter Notebook');\r\n    export const exportDialogFilter = localize('DataScience.exportDialogFilter', 'Jupyter Notebooks');\r\n    export const exportDialogComplete = localize('DataScience.exportDialogComplete', 'Notebook written to {0}');\r\n    export const exportDialogFailed = localize('DataScience.exportDialogFailed', 'Failed to export notebook. {0}');\r\n    export const exportOpenQuestion = localize('DataScience.exportOpenQuestion', 'Open in browser');\r\n    export const runCellLensCommandTitle = localize('python.command.python.datascience.runcell.title', 'Run cell');\r\n    export const importDialogTitle = localize('DataScience.importDialogTitle', 'Import Jupyter Notebook');\r\n    export const importDialogFilter = localize('DataScience.importDialogFilter', 'Jupyter Notebooks');\r\n    export const notebookCheckForImportTitle = localize('DataScience.notebookCheckForImportTitle', 'Do you want to import the Jupyter Notebook into Python code?');\r\n    export const notebookCheckForImportYes = localize('DataScience.notebookCheckForImportYes', 'Import');\r\n    export const notebookCheckForImportNo = localize('DataScience.notebookCheckForImportNo', 'Later');\r\n    export const notebookCheckForImportDontAskAgain = localize('DataScience.notebookCheckForImportDontAskAgain', 'Don\\'t Ask Again');\r\n    export const jupyterNotSupported = localize('DataScience.jupyterNotSupported', 'Jupyter is not installed');\r\n    export const jupyterNbConvertNotSupported = localize('DataScience.jupyterNbConvertNotSupported', 'Jupyter nbconvert is not installed');\r\n    export const jupyterLaunchTimedOut = localize('DataScience.jupyterLaunchTimedOut', 'The Jupyter notebook server failed to launch in time');\r\n    export const jupyterLaunchNoURL = localize('DataScience.jupyterLaunchNoURL', 'Failed to find the URL of the launched Jupyter notebook server');\r\n    export const pythonInteractiveHelpLink = localize('DataScience.pythonInteractiveHelpLink', 'See [https://aka.ms/pyaiinstall] for help on installing jupyter.');\r\n    export const importingFormat = localize('DataScience.importingFormat', 'Importing {0}');\r\n    export const startingJupyter = localize('DataScience.startingJupyter', 'Starting Jupyter Server');\r\n    export const runAllCellsLensCommandTitle = localize('python.command.python.datascience.runallcells.title', 'Run all cells');\r\n\r\n    export const restartKernelMessage = localize('DataScience.restartKernelMessage', 'Do you want to restart the Jupter kernel? All variables will be lost.');\r\n    export const restartKernelMessageYes = localize('DataScience.restartKernelMessageYes', 'Restart');\r\n    export const restartKernelMessageNo = localize('DataScience.restartKernelMessageNo', 'Cancel');\r\n    export const restartingKernelStatus = localize('DataScience.restartingKernelStatus', 'Restarting iPython Kernel');\r\n    export const executingCode = localize('DataScience.executingCode', 'Executing Cell');\r\n    export const collapseAll = localize('DataScience.collapseAll', 'Collapse all cell inputs');\r\n    export const expandAll = localize('DataScience.expandAll', 'Expand all cell inputs');\r\n    export const exportKey = localize('DataScience.export', 'Export as Jupyter Notebook');\r\n    export const restartServer = localize('DataScience.restartServer', 'Restart iPython Kernel');\r\n    export const undo = localize('DataScience.undo', 'Undo');\r\n    export const redo = localize('DataScience.redo', 'Redo');\r\n    export const clearAll = localize('DataScience.clearAll', 'Remove All Cells');\r\n    export const pythonVersionHeader = localize('DataScience.pythonVersionHeader', 'Python Version:');\r\n    export const pythonRestartHeader = localize('DataScience.pythonRestartHeader', 'Restarted Kernel:');\r\n    export const pythonVersionHeaderNoPyKernel = localize('DataScience.pythonVersionHeaderNoPyKernel', 'Python Version may not match, no ipykernel found:');\r\n    export const jupyterNotebookFailure = localize('DataScience.jupyterNotebookFailure', 'Jupyter notebook failed to launch. \\r\\n{0}');\r\n    export const notebookVersionFormat = localize('DataScience.notebookVersionFormat', 'Jupyter Notebook Version: {0}');\r\n    //tslint:disable-next-line:no-multiline-string\r\n    export const jupyterKernelNotSupportedOnActive = localize('DataScience.jupyterKernelNotSupportedOnActive', `iPython kernel cannot be started from '{0}'. Using closest match {1} instead.`);\r\n    export const jupyterKernelSpecNotFound = localize('DataScience.jupyterKernelSpecNotFound', 'Cannot create a iPython kernel spec and none are available for use');\r\n    export const interruptKernel = localize('DataScience.interruptKernel', 'Interrupt iPython Kernel');\r\n}\r\n\r\n// Skip using vscode-nls and instead just compute our strings based on key values. Key values\r\n// can be loaded out of the nls.<locale>.json files\r\nlet loadedCollection: { [index: string]: string } | undefined;\r\nlet defaultCollection: { [index: string]: string } | undefined;\r\nconst askedForCollection: { [index: string]: string } = {};\r\nlet loadedLocale: string;\r\n\r\nexport function localize(key: string, defValue: string) {\r\n    // Return a pointer to function so that we refetch it on each call.\r\n    return () => {\r\n        return getString(key, defValue);\r\n    };\r\n}\r\n\r\nexport function getCollection() {\r\n    // Load the current collection\r\n    if (!loadedCollection || parseLocale() !== loadedLocale) {\r\n        load();\r\n    }\r\n\r\n    // Combine the default and loaded collections\r\n    return { ...defaultCollection, ...loadedCollection };\r\n}\r\n\r\nexport function getAskedForCollection() {\r\n    return askedForCollection;\r\n}\r\n\r\nfunction parseLocale(): string {\r\n    // Attempt to load from the vscode locale. If not there, use english\r\n    const vscodeConfigString = process.env.VSCODE_NLS_CONFIG;\r\n    return vscodeConfigString ? JSON.parse(vscodeConfigString).locale : 'en-us';\r\n}\r\n\r\nfunction getString(key: string, defValue: string) {\r\n    // Load the current collection\r\n    if (!loadedCollection || parseLocale() !== loadedLocale) {\r\n        load();\r\n    }\r\n\r\n    // First lookup in the dictionary that matches the current locale\r\n    if (loadedCollection && loadedCollection.hasOwnProperty(key)) {\r\n        askedForCollection[key] = loadedCollection[key];\r\n        return loadedCollection[key];\r\n    }\r\n\r\n    // Fallback to the default dictionary\r\n    if (defaultCollection && defaultCollection.hasOwnProperty(key)) {\r\n        askedForCollection[key] = defaultCollection[key];\r\n        return defaultCollection[key];\r\n    }\r\n\r\n    // Not found, return the default\r\n    askedForCollection[key] = defValue;\r\n    return defValue;\r\n}\r\n\r\nfunction load() {\r\n    // Figure out our current locale.\r\n    loadedLocale = parseLocale();\r\n\r\n    // Find the nls file that matches (if there is one)\r\n    const nlsFile = path.join(EXTENSION_ROOT_DIR, `package.nls.${loadedLocale}.json`);\r\n    if (fs.existsSync(nlsFile)) {\r\n        const contents = fs.readFileSync(nlsFile, 'utf8');\r\n        loadedCollection = JSON.parse(contents);\r\n    } else {\r\n        // If there isn't one, at least remember that we looked so we don't try to load a second time\r\n        loadedCollection = {};\r\n    }\r\n\r\n    // Get the default collection if necessary. Strings may be in the default or the locale json\r\n    if (!defaultCollection) {\r\n        const defaultNlsFile = path.join(EXTENSION_ROOT_DIR, 'package.nls.json');\r\n        if (fs.existsSync(defaultNlsFile)) {\r\n            const contents = fs.readFileSync(defaultNlsFile, 'utf8');\r\n            defaultCollection = JSON.parse(contents);\r\n        } else {\r\n            defaultCollection = {};\r\n        }\r\n    }\r\n}\r\n\r\n// Default to loading the current locale\r\nload();\r\n","module.exports = require(\"fs\");","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n'use strict';\n\nimport * as path from 'path';\n\n// This file is also used by the debug adapter.\n// When bundling, the bundle file for the debug adapter ends up elsewhere.\nconst folderName = path.basename(__dirname);\nexport const EXTENSION_ROOT_DIR = folderName === 'client' ? path.join(__dirname, '..', '..') : path.join(__dirname, '..', '..', '..', '..');\n","module.exports = require(\"./node_modules/source-map-support\");"],"sourceRoot":""}